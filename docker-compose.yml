version: '3.8'

networks:
  matrix:
    driver: bridge
  web:
    external: true

services:
  # Init container pour les permissions des volumes
  volume-permissions:
    image: busybox:latest
    container_name: matrix_volume_permissions
    volumes:
      - postgres_data:/postgres_data
      - redis_data:/redis_data
      - synapse_data:/synapse_data
      - prometheus_data:/prometheus_data
      - grafana_data:/grafana_data
      - coturn_data:/coturn_data
    command: >
      sh -c "
      chown -R 501:20 /postgres_data /redis_data /synapse_data /prometheus_data /grafana_data /coturn_data &&
      chmod -R 755 /postgres_data /redis_data /synapse_data /prometheus_data /grafana_data /coturn_data &&
      echo 'Volume permissions set successfully'
      "

  # Reverse Proxy avec SSL automatique
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:8079"
      - "443:8443"
      - "8448:8448"  # Fédération Matrix
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic
      - traefik_certs:/certs
    environment:
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=admin@${DOMAIN}
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}:${TRAEFIK_DASHBOARD_PASSWORD_HASH}"

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: matrix_postgres
    restart: unless-stopped
    user: "501:20"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - matrix
    depends_on:
      volume-permissions:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: matrix_redis
    restart: unless-stopped
    user: "501:20"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - matrix
    depends_on:
      volume-permissions:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Serveur Matrix Synapse
  synapse:
    image: matrixdotorg/synapse:latest
    container_name: matrix_synapse
    restart: unless-stopped
    user: "501:20"
    environment:
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME}
      SYNAPSE_REPORT_STATS: "no"
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml
      UID: 501
      GID: 20
    volumes:
      - synapse_data:/data
      - ./synapse/homeserver.yaml:/data/homeserver.yaml
      - ./synapse/log.config:/data/log.config
    networks:
      - matrix
      - web
    depends_on:
      volume-permissions:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      
      # Client API
      - "traefik.http.routers.synapse.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.synapse.tls.certresolver=letsencrypt"
      - "traefik.http.routers.synapse.service=synapse"
      - "traefik.http.services.synapse.loadbalancer.server.port=8008"
      
      # Fédération
      - "traefik.http.routers.synapse-federation.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.synapse-federation.entrypoints=federation"
      - "traefik.http.routers.synapse-federation.tls.certresolver=letsencrypt"
      - "traefik.http.routers.synapse-federation.service=synapse-federation"
      - "traefik.http.services.synapse-federation.loadbalancer.server.port=8008"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8008/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Serveur TURN/STUN
  coturn:
    image: coturn/coturn:latest
    container_name: matrix_coturn
    restart: unless-stopped
    network_mode: host
    environment:
      TURN_SECRET: ${TURN_SECRET}
      REALM: ${DOMAIN}
    volumes:
      - coturn_data:/var/lib/coturn
      - traefik_certs:/certs
    command: >
      --listening-port=3478
      --tls-listening-port=5349
      --alt-listening-port=3479
      --alt-tls-listening-port=5350
      --min-port=49152
      --max-port=65535
      --fingerprint
      --lt-cred-mech
      --use-auth-secret
      --static-auth-secret=${TURN_SECRET}
      --realm=${DOMAIN}
      --server-name=${DOMAIN}
      --cert=/certs/${DOMAIN}.crt
      --pkey=/certs/${DOMAIN}.key
      --cipher-list=ECDHE-RSA-AES256-GCM-SHA384
      --no-multicast-peers
      --no-cli
      --no-tlsv1
      --pidfile=/var/lib/coturn/turnserver.pid
      --log-file=stdout
      --simple-log
      --verbose

  # NGINX pour servir Element Web
  nginx:
    image: nginx:alpine
    container_name: matrix_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./element:/usr/share/nginx/html
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.element.rule=Host(`element.${DOMAIN}`)"
      - "traefik.http.routers.element.tls.certresolver=letsencrypt"
      - "traefik.http.services.element.loadbalancer.server.port=80"

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: matrix_prometheus
    restart: unless-stopped
    user: "501:20"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - matrix
      - web
    depends_on:
      volume-permissions:
        condition: service_completed_successfully
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=auth"

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: matrix_grafana
    restart: unless-stopped
    user: "501:20"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${PROMETHEUS_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_PATHS_DATA: /var/lib/grafana
      GF_PATHS_LOGS: /var/lib/grafana/logs
      GF_PATHS_PLUGINS: /var/lib/grafana/plugins
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - matrix
      - web
    depends_on:
      volume-permissions:
        condition: service_completed_successfully
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

volumes:
  traefik_certs:
  prometheus_data:
  grafana_data:
  synapse_data:
  postgres_data:
  redis_data:
  coturn_data: